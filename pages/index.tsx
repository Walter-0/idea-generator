import type { NextPage } from "next";
import { useEffect, useState } from "react";
import Head from "next/head";
import axios, { AxiosResponse } from "axios";
import {
  Box,
  Button,
  CircularProgress,
  Container,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Typography,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import FavoriteIcon from "@mui/icons-material/Favorite";
import FavoriteBorderIcon from "@mui/icons-material/FavoriteBorder";
import pluralize from "pluralize";
import Layout from "../components/Layout";
import { useSession } from "next-auth/react";
import { Idea, IdeaDto } from "../models/Idea";


const Home: NextPage = () => {
  const { data } = useSession();
  let accessToken: string;

  if (data) {
    accessToken = data.accessToken as string;
    console.log(data);
  }
  const [ideas, setIdeas] = useState<Idea[]>([]);
  const [newIdea, setNewIdea] = useState<Idea>();

  const getIdeas = async (): Promise<void> => {
    try {
      const response: AxiosResponse<Idea[]> = await axios.get<Idea[]>(
        "/api/ideas"
      );
      setIdeas(response.data);
    } catch (error) {
      throw error;
    }
  };

  const generateIdea = async (): Promise<void> => {
    try {
      const response: AxiosResponse<Idea> = await axios.get<Idea>(
        "/api/ideas/new"
      );
      setNewIdea(response.data);
    } catch (error) {
      throw error;
    }
  };

  const saveIdea = async (): Promise<void> => {
    if (newIdea) {
      try {
        await axios.post<IdeaDto>(
          "/api/ideas",
          {
            appName: newIdea.appName,
            noun: pluralize(newIdea.noun),
          },
          {
            headers: { Authorization: `Bearer ${accessToken}` },
          }
        );
        void getIdeas();
      } catch (error) {
        throw error;
      }
    }
  };

  const likeIdea = async (idea: Idea): Promise<void> => {
    console.log("liked");

    //   try {
    //     if (true) {
    //       await axios.delete(`${baseURL}/ideas/${idea._id}/likes/`);
    //     } else {
    //       await axios.patch(`${baseURL}/ideas/${idea._id}/likes/`);
    //     }
    //     void getIdeas();
    //   } catch (error) {
    //     throw error;
    //   }
  };

  const formatName = (appName: string, noun: string): string => {
    return `${appName} for ${pluralize(noun)}`;
  };

  const formatDate = (created: string): string => {
    const formattedDate = new Date(created);
    return formattedDate.toLocaleString();
  };

  useEffect(() => {
    void getIdeas();
  }, []);

  return (
    <Layout>
      <Head>
        <title>Idea Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* eslint-disable-next-line @next/next/no-page-custom-font */}
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
      </Head>

      <Container maxWidth="sm">
        <Button variant="contained" size="large" onClick={generateIdea}>
          Generate Idea
        </Button>

        <Button
          variant="contained"
          color="success"
          size="large"
          disabled={!newIdea}
          endIcon={<SendIcon />}
          onClick={saveIdea}
        >
          Save Idea
        </Button>

        {newIdea && (
          <Typography variant="h3">
            {formatName(newIdea.appName, newIdea.noun)}
          </Typography>
        )}

        <Box>
          <List>
            {!ideas.length ? (
              <CircularProgress />
            ) : (
              ideas.map((idea) => (
                <ListItem
                  key={idea._id}
                  secondaryAction={
                    <IconButton edge="end" onClick={() => likeIdea(idea)}>
                      <FavoriteBorderIcon htmlColor="red" fontSize="large" />
                    </IconButton>
                  }
                >
                  <ListItemText
                    primary={formatName(idea.appName, idea.noun)}
                    secondary={formatDate(idea.createdAt)}
                  />
                </ListItem>
              ))
            )}
          </List>
        </Box>
      </Container>
    </Layout>
  );
};

export default Home;
