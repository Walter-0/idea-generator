import type { GetServerSideProps, NextPage } from "next";
import { useState } from "react";
import Head from "next/head";
import { useSession, getSession } from "next-auth/react";
import { Session } from "next-auth";
import { createHmac } from "crypto";
import axios, { AxiosResponse } from "axios";
import {
  Alert,
  Box,
  Button,
  CircularProgress,
  Container,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Snackbar,
  Tooltip,
  Typography,
} from "@mui/material";
import SendIcon from "@mui/icons-material/Send";
import FavoriteIcon from "@mui/icons-material/Favorite";
import FavoriteBorderIcon from "@mui/icons-material/FavoriteBorder";
import pluralize from "pluralize";
import Layout from "../components/Layout";
import { Idea, IdeaModel } from "../models/Idea";
import dbConnect from "../utils/mongoose";

interface HomeProps {
  ideas: Idea[];
  userId: string;
}

const formatName = (appName: string, noun: string): string => {
  return `${appName} for ${pluralize(noun)}`;
};

const formatDate = (createdAt: string): string => {
  const formattedDate = new Date(createdAt);
  return formattedDate.toLocaleString();
};

const Home: NextPage<HomeProps> = (props) => {
  const { data: session } = useSession();
  const [snackBarIsOpen, setSnackBarIsOpen] = useState(false);
  const [ideas, setIdeas] = useState<Idea[]>(props.ideas);
  const [generatedIdea, setGeneratedIdea] = useState<Idea>();

  const getIdeas = async (): Promise<void> => {
    try {
      const { data }: AxiosResponse<Idea[]> = await axios.get<Idea[]>(
        "/api/ideas"
      );
      setIdeas(data);
    } catch (error) {
      throw error;
    }
  };

  const generateIdea = async (): Promise<void> => {
    try {
      const { data }: AxiosResponse<Idea> = await axios.get<Idea>(
        "/api/ideas/new"
      );
      setGeneratedIdea(data);
    } catch (error) {
      throw error;
    }
  };

  const saveIdea = async (): Promise<void> => {
    if (session && generatedIdea) {
      try {
        const { data }: AxiosResponse<Idea> = await axios.post("/api/ideas", {
          appName: generatedIdea.appName,
          noun: pluralize(generatedIdea.noun),
        });
        setIdeas((ideas) => [...ideas, data]);
        setSnackBarIsOpen(true);
      } catch (error) {
        throw error;
      }
    }
  };

  const toggleLikeIdea = async (idea: Idea): Promise<void> => {
    try {
      if (session && idea.likes.includes(props.userId)) {
        await axios.delete(`/api/ideas/${idea._id}/likes/`);
      } else {
        await axios.patch(`/api/ideas/${idea._id}/likes/`);
      }
      void getIdeas();
    } catch (error) {
      throw error;
    }
  };

  return (
    <Layout>
      <Head>
        <title>Idea Generator</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container maxWidth="sm" sx={{ mt: 4 }}>
        <Button
          variant="contained"
          size="large"
          onClick={generateIdea}
          sx={{ mr: 2 }}
        >
          Generate Idea
        </Button>

        <Tooltip
          title="Log in to save ideas"
          placement="top"
          disableHoverListener={!!session}
        >
          <span>
            <Button
              variant="contained"
              color="success"
              size="large"
              disabled={!(session && generatedIdea)}
              endIcon={<SendIcon />}
              onClick={saveIdea}
            >
              Save Idea
            </Button>
          </span>
        </Tooltip>

        {generatedIdea && (
          <Typography variant="h3" mt={4}>
            {formatName(generatedIdea.appName, generatedIdea.noun)}
          </Typography>
        )}

        <Box>
          <List>
            {!ideas?.length ? (
              <CircularProgress />
            ) : (
              ideas.map((idea) => (
                <ListItem
                  key={idea._id}
                  divider
                  secondaryAction={
                    <>
                      <Typography variant="button">
                        {idea.likesLength || 0}
                      </Typography>

                      <Tooltip
                        title="Log in to like ideas"
                        placement="top"
                        disableHoverListener={!!session}
                      >
                        <span>
                          <IconButton
                            edge="end"
                            onClick={() => toggleLikeIdea(idea)}
                            disabled={!session}
                          >
                            {idea.likes?.includes(props.userId) ? (
                              <FavoriteIcon htmlColor="red" fontSize="large" />
                            ) : (
                              <FavoriteBorderIcon
                                htmlColor="red"
                                fontSize="large"
                              />
                            )}
                          </IconButton>
                        </span>
                      </Tooltip>
                    </>
                  }
                >
                  <ListItemText
                    primary={`${idea.appName} for ${idea.noun}`}
                    secondary={formatDate(idea.createdAt!)}
                  />
                </ListItem>
              ))
            )}
          </List>
        </Box>
        <Snackbar
          message="Successfully saved!"
          autoHideDuration={5000}
          open={snackBarIsOpen}
          onClose={() => setSnackBarIsOpen(false)}
        >
          <Alert onClose={() => setSnackBarIsOpen(false)} severity="success">
            Saved successfully!
          </Alert>
        </Snackbar>
      </Container>
    </Layout>
  );
};

export const getServerSideProps: GetServerSideProps<{
  session: Session | null;
}> = async (context) => {
  await dbConnect();
  const session = await getSession(context);
  const secret = process.env.JWT_SECRET as string;
  let hash = "";

  if (session) {
    const email = session?.user!.email!;
    hash = createHmac("sha256", secret).update(email).digest("hex");
  }

  const ideas: Idea[] = await IdeaModel.find().sort({
    likesLength: -1,
    createdAt: -1,
  });

  return {
    props: {
      session,
      userId: hash || "",
      ideas: JSON.parse(JSON.stringify(ideas)),
    },
  };
};

export default Home;
